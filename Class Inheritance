A class Person is defined already, Create a class named Student inheriting the Person class and consisting of the properties class and rollNo. Then, create another class named Teacher inheriting Person class and consisting of the properties teacherId and subject. Call the constructor of its parent in both the classes. Create a method getDetails() in both the classes which will return an array with data in the following order:
For Student [name,rollNo,class]
For Teachers [name,teacherID,subject]
The constructors of both the classes will receive arguments in the same order.

_______________________________________________________________________________
class Person {
    constructor(name) {
        this.name = name;
    }
 }
  
 //Define Student and teacher class here
class Student extends Person{
    constructor (name,rollNo,division){      //this constructur should accept name,roll anddivision
         super(name);
         this.roll = rollNo;
         this.className= division;
    }
    getDetails(){    //this should return all the variables as a array
        return [this.name,this.roll,this.className];
    }
}
class Teacher extends Person{       //extends Person
    constructor(name,teacherid,subject){
        super(name);
        this.id=teacherid;
        this.subject=subject;
        
    }
    getDetails(){    //this should return all the variables as a array
        return [this.name,this.id,this.subject];
    }
}
 
 

// Input and output has already been handled for you


process.stdin.resume()
process.stdin.setEncoding('utf8')

let remainder = ''
process.stdin.on('data', function (chunk) {
  let arr = chunk.toString()
  arr = arr.replace('\r','')
  arr = arr.replace('\n','')
  arr = arr.split(' ')
  let s1 = new Student(arr[0],arr[1],arr[2])
  let t1 = new Teacher(arr[3],arr[4],arr[5])
  let ans = s1.getDetails().join(' ')
  ans += '\n' + t1.getDetails().join(' ')
  process.stdout.write(ans)
  process.exit();
});
 
